<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Suivi Quotidien - Sport, Poids, Alcool</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/recharts/2.8.0/umd/Recharts.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.23.5/babel.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/umd/lucide.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://apis.google.com/js/api.js"></script>
    <style>
        .recharts-wrapper {
            font-family: inherit;
        }
        .y-axis-left { fill: #3B82F6; }
        .y-axis-right { fill: #EF4444; }
        .config-panel {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;
        const { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ComposedChart, Bar } = Recharts;

        const DailyTracker = () => {
            const [data, setData] = useState([]);
            const [currentEntry, setCurrentEntry] = useState({
                date: new Date().toISOString().split('T')[0],
                sportTapis: 0,
                sportVelo: 0,
                sportCourse: 0,
                alcool: 0,
                poids: 0
            });
            const [activeTab, setActiveTab] = useState('saisie');
            const [sheetsConfig, setSheetsConfig] = useState({
                spreadsheetId: '',
                apiKey: '',
                sheetName: 'Suivi',
                isConfigured: false
            });
            const [isConnecting, setIsConnecting] = useState(false);
            const [connectionStatus, setConnectionStatus] = useState('');

            // Charger les données et la config au démarrage
            useEffect(() => {
                const savedData = JSON.parse(localStorage.getItem('dailyTrackerData') || '[]');
                const savedConfig = JSON.parse(localStorage.getItem('sheetsConfig') || '{}');
                setData(savedData);
                if (savedConfig.spreadsheetId && savedConfig.apiKey) {
                    setSheetsConfig({...savedConfig, isConfigured: true});
                }
            }, []);

            // Sauvegarder la configuration
            const saveConfig = (config) => {
                localStorage.setItem('sheetsConfig', JSON.stringify(config));
                setSheetsConfig({...config, isConfigured: true});
            };

            // Initialiser l'API Google Sheets
            const initGoogleSheets = () => {
                return new Promise((resolve, reject) => {
                    if (window.gapi) {
                        window.gapi.load('client', () => {
                            window.gapi.client.init({
                                apiKey: sheetsConfig.apiKey,
                                discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4']
                            }).then(resolve).catch(reject);
                        });
                    } else {
                        reject(new Error('Google API non disponible'));
                    }
                });
            };

            // Lire les données depuis Google Sheets
            const loadFromSheets = async () => {
                try {
                    setIsConnecting(true);
                    setConnectionStatus('Connexion à Google Sheets...');
                    
                    await initGoogleSheets();
                    
                    const response = await window.gapi.client.sheets.spreadsheets.values.get({
                        spreadsheetId: sheetsConfig.spreadsheetId,
                        range: `${sheetsConfig.sheetName}!A:F`
                    });

                    const rows = response.result.values || [];
                    if (rows.length > 1) { // Skip header row
                        const sheetsData = rows.slice(1).map(row => ({
                            date: row[0] || '',
                            sportTapis: parseFloat(row[1]) || 0,
                            sportVelo: parseFloat(row[2]) || 0,
                            sportCourse: parseFloat(row[3]) || 0,
                            alcool: parseFloat(row[4]) || 0,
                            poids: parseFloat(row[5]) || 0
                        })).filter(entry => entry.date);

                        setData(sheetsData);
                        localStorage.setItem('dailyTrackerData', JSON.stringify(sheetsData));
                        setConnectionStatus('✅ Données chargées avec succès');
                    }
                } catch (error) {
                    console.error('Erreur lors du chargement:', error);
                    setConnectionStatus('❌ Erreur de connexion: ' + error.message);
                } finally {
                    setIsConnecting(false);
                }
            };

            // Sauvegarder vers Google Sheets
            const saveToSheets = async (newData) => {
                if (!sheetsConfig.isConfigured) {
                    localStorage.setItem('dailyTrackerData', JSON.stringify(newData));
                    setData(newData);
                    return;
                }

                try {
                    setIsConnecting(true);
                    setConnectionStatus('Sauvegarde vers Google Sheets...');
                    
                    await initGoogleSheets();

                    // Préparer les données avec en-têtes
                    const values = [
                        ['Date', 'Sport Tapis (min)', 'Sport Vélo (min)', 'Sport Course (min)', 'Alcool (verres)', 'Poids (kg)'],
                        ...newData.map(entry => [
                            entry.date,
                            entry.sportTapis,
                            entry.sportVelo,
                            entry.sportCourse,
                            entry.alcool,
                            entry.poids
                        ])
                    ];

                    // Effacer et réécrire toutes les données
                    await window.gapi.client.sheets.spreadsheets.values.clear({
                        spreadsheetId: sheetsConfig.spreadsheetId,
                        range: `${sheetsConfig.sheetName}!A:F`
                    });

                    await window.gapi.client.sheets.spreadsheets.values.update({
                        spreadsheetId: sheetsConfig.spreadsheetId,
                        range: `${sheetsConfig.sheetName}!A1`,
                        valueInputOption: 'RAW',
                        resource: { values }
                    });

                    localStorage.setItem('dailyTrackerData', JSON.stringify(newData));
                    setData(newData);
                    setConnectionStatus('✅ Sauvegardé dans Google Sheets');
                    
                    setTimeout(() => setConnectionStatus(''), 3000);
                } catch (error) {
                    console.error('Erreur lors de la sauvegarde:', error);
                    setConnectionStatus('❌ Erreur de sauvegarde: ' + error.message);
                    // Sauvegarder localement en cas d'erreur
                    localStorage.setItem('dailyTrackerData', JSON.stringify(newData));
                    setData(newData);
                }
                setIsConnecting(false);
            };

            const handleInputChange = (field, value) => {
                setCurrentEntry(prev => ({
                    ...prev,
                    [field]: field === 'date' ? value : (parseFloat(value) || 0)
                }));
            };

            const handleSubmit = async () => {
                const existingIndex = data.findIndex(item => item.date === currentEntry.date);
                let newData;
                
                if (existingIndex >= 0) {
                    newData = [...data];
                    newData[existingIndex] = { ...currentEntry };
                } else {
                    newData = [...data, { ...currentEntry }].sort((a, b) => new Date(a.date) - new Date(b.date));
                }
                
                await saveToSheets(newData);
                
                // Réinitialiser le formulaire avec la date du lendemain
                const nextDay = new Date(currentEntry.date);
                nextDay.setDate(nextDay.getDate() + 1);
                setCurrentEntry({
                    date: nextDay.toISOString().split('T')[0],
                    sportTapis: 0,
                    sportVelo: 0,
                    sportCourse: 0,
                    alcool: 0,
                    poids: 0
                });
            };

            const testConnection = async () => {
                try {
                    setIsConnecting(true);
                    setConnectionStatus('Test de connexion...');
                    
                    await initGoogleSheets();
                    
                    const response = await window.gapi.client.sheets.spreadsheets.get({
                        spreadsheetId: sheetsConfig.spreadsheetId
                    });
                    
                    setConnectionStatus('✅ Connexion réussie au document: ' + response.result.properties.title);
                } catch (error) {
                    setConnectionStatus('❌ Erreur de connexion: ' + error.message);
                } finally {
                    setIsConnecting(false);
                }
            };

            const formatDate = (dateStr) => {
                const date = new Date(dateStr);
                return date.toLocaleDateString('fr-FR', { day: '2-digit', month: '2-digit' });
            };

            // Préparer les données pour le graphique unifié avec échelles adaptées
            const prepareChartData = () => {
                if (data.length === 0) return [];

                // Calculer les valeurs min/max pour chaque métrique
                const sportValues = data.map(d => d.sportTapis + d.sportVelo + d.sportCourse);
                const poidsValues = data.map(d => d.poids).filter(p => p > 0);
                const alcoolValues = data.map(d => d.alcool);

                const sportMax = Math.max(...sportValues);
                const poidsMin = Math.min(...poidsValues);
                const poidsMax = Math.max(...poidsValues);
                const alcoolMax = Math.max(...alcoolValues);

                // Normaliser les données pour un affichage optimal
                return data.map(item => {
                    const sportTotal = item.sportTapis + item.sportVelo + item.sportCourse;
                    
                    return {
                        date: formatDate(item.date),
                        fullDate: item.date,
                        // Sport (échelle de gauche)
                        sportTotal: sportTotal,
                        sportTapis: item.sportTapis,
                        sportVelo: item.sportVelo,
                        sportCourse: item.sportCourse,
                        // Poids (échelle de droite - normalisé)
                        poids: item.poids,
                        poidsNormalized: item.poids > 0 ? ((item.poids - poidsMin) / (poidsMax - poidsMin)) * sportMax * 0.8 : 0,
                        // Alcool (échelle de droite - normalisé)
                        alcool: item.alcool,
                        alcoolNormalized: alcoolMax > 0 ? (item.alcool / alcoolMax) * sportMax * 0.6 : 0,
                        // Valeurs originales pour les tooltips
                        originalPoids: item.poids,
                        originalAlcool: item.alcool
                    };
                });
            };

            const chartData = prepareChartData();

            const CustomTooltip = ({ active, payload, label }) => {
                if (active && payload && payload.length) {
                    const data = payload[0].payload;
                    return React.createElement('div', { 
                        className: "bg-white p-4 border border-gray-300 rounded-lg shadow-lg" 
                    },
                        React.createElement('p', { className: "font-semibold mb-2" }, `Date: ${label}`),
                        React.createElement('div', { className: "space-y-1 text-sm" },
                            React.createElement('p', { style: { color: '#10B981' } }, 
                                `🏃 Tapis: ${data.sportTapis} min`
                            ),
                            React.createElement('p', { style: { color: '#3B82F6' } }, 
                                `🚴 Vélo: ${data.sportVelo} min`
                            ),
                            React.createElement('p', { style: { color: '#F59E0B' } }, 
                                `🏃‍♂️ Course: ${data.sportCourse} min`
                            ),
                            React.createElement('p', { style: { color: '#8B5CF6' } }, 
                                `📊 Total sport: ${data.sportTotal} min`
                            ),
                            data.originalPoids > 0 && React.createElement('p', { style: { color: '#EC4899' } }, 
                                `⚖️ Poids: ${data.originalPoids} kg`
                            ),
                            React.createElement('p', { style: { color: '#EF4444' } }, 
                                `🍷 Alcool: ${data.originalAlcool} verres`
                            )
                        )
                    );
                }
                return null;
            };

            return React.createElement('div', { className: "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100" },
                React.createElement('div', { className: "container mx-auto px-4 py-8" },
                    React.createElement('div', { className: "bg-white rounded-2xl shadow-xl overflow-hidden" },
                        // Header
                        React.createElement('div', { className: "bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-6" },
                            React.createElement('h1', { className: "text-3xl font-bold flex items-center gap-3" },
                                React.createElement('span', { dangerouslySetInnerHTML: { __html: lucide.icons['trending-up'].toSvg({ class: 'w-8 h-8' }) } }),
                                "Suivi Quotidien"
                            ),
                            React.createElement('p', { className: "mt-2 opacity-90" }, 
                                "Avec synchronisation Google Sheets"
                            ),
                            connectionStatus && React.createElement('div', { 
                                className: "mt-3 px-3 py-2 bg-black bg-opacity-20 rounded-lg text-sm" 
                            }, connectionStatus)
                        ),

                        // Navigation
                        React.createElement('div', { className: "border-b border-gray-200" },
                            React.createElement('nav', { className: "flex" },
                                React.createElement('button', {
                                    onClick: () => setActiveTab('saisie'),
                                    className: `px-6 py-4 font-medium text-sm ${
                                        activeTab === 'saisie'
                                            ? 'border-b-2 border-blue-500 text-blue-600 bg-blue-50'
                                            : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'
                                    }`
                                },
                                    React.createElement('span', { dangerouslySetInnerHTML: { __html: lucide.icons['plus'].toSvg({ class: 'w-4 h-4 inline mr-2' }) } }),
                                    "Saisie"
                                ),
                                React.createElement('button', {
                                    onClick: () => setActiveTab('graphique'),
                                    className: `px-6 py-4 font-medium text-sm ${
                                        activeTab === 'graphique'
                                            ? 'border-b-2 border-blue-500 text-blue-600 bg-blue-50'
                                            : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'
                                    }`
                                },
                                    React.createElement('span', { dangerouslySetInnerHTML: { __html: lucide.icons['bar-chart-3'].toSvg({ class: 'w-4 h-4 inline mr-2' }) } }),
                                    "Graphique Unifié"
                                ),
                                React.createElement('button', {
                                    onClick: () => setActiveTab('config'),
                                    className: `px-6 py-4 font-medium text-sm ${
                                        activeTab === 'config'
                                            ? 'border-b-2 border-blue-500 text-blue-600 bg-blue-50'
                                            : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'
                                    }`
                                },
                                    React.createElement('span', { dangerouslySetInnerHTML: { __html: lucide.icons['settings'].toSvg({ class: 'w-4 h-4 inline mr-2' }) } }),
                                    "Google Sheets"
                                )
                            )
                        ),

                        React.createElement('div', { className: "p-6" },
                            // Onglet Saisie
                            activeTab === 'saisie' && React.createElement('div', { className: "max-w-2xl mx-auto" },
                                React.createElement('div', { className: "space-y-6" },
                                    // Date
                                    React.createElement('div', { className: "bg-gray-50 p-4 rounded-lg" },
                                        React.createElement('label', { className: "block text-sm font-medium text-gray-700 mb-2" },
                                            React.createElement('span', { dangerouslySetInnerHTML: { __html: lucide.icons['calendar'].toSvg({ class: 'w-4 h-4 inline mr-2' }) } }),
                                            "Date"
                                        ),
                                        React.createElement('input', {
                                            type: "date",
                                            value: currentEntry.date,
                                            onChange: (e) => handleInputChange('date', e.target.value),
                                            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        })
                                    ),

                                    // Sports
                                    React.createElement('div', { className: "grid grid-cols-1 md:grid-cols-3 gap-4" },
                                        React.createElement('div', { className: "bg-green-50 p-4 rounded-lg" },
                                            React.createElement('label', { className: "block text-sm font-medium text-green-700 mb-2" },
                                                React.createElement('span', { dangerouslySetInnerHTML: { __html: lucide.icons['activity'].toSvg({ class: 'w-4 h-4 inline mr-2' }) } }),
                                                "Sport Tapis (min)"
                                            ),
                                            React.createElement('input', {
                                                type: "number",
                                                min: "0",
                                                value: currentEntry.sportTapis,
                                                onChange: (e) => handleInputChange('sportTapis', e.target.value),
                                                className: "w-full px-3 py-2 border border-green-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                                            })
                                        ),
                                        React.createElement('div', { className: "bg-blue-50 p-4 rounded-lg" },
                                            React.createElement('label', { className: "block text-sm font-medium text-blue-700 mb-2" },
                                                React.createElement('span', { dangerouslySetInnerHTML: { __html: lucide.icons['bike'].toSvg({ class: 'w-4 h-4 inline mr-2' }) } }),
                                                "Sport Vélo (min)"
                                            ),
                                            React.createElement('input', {
                                                type: "number",
                                                min: "0",
                                                value: currentEntry.sportVelo,
                                                onChange: (e) => handleInputChange('sportVelo', e.target.value),
                                                className: "w-full px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                            })
                                        ),
                                        React.createElement('div', { className: "bg-orange-50 p-4 rounded-lg" },
                                            React.createElement('label', { className: "block text-sm font-medium text-orange-700 mb-2" },
                                                React.createElement('span', { dangerouslySetInnerHTML: { __html: lucide.icons['footprints'].toSvg({ class: 'w-4 h-4 inline mr-2' }) } }),
                                                "Sport Course (min)"
                                            ),
                                            React.createElement('input', {
                                                type: "number",
                                                min: "0",
                                                value: currentEntry.sportCourse,
                                                onChange: (e) => handleInputChange('sportCourse', e.target.value),
                                                className: "w-full px-3 py-2 border border-orange-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                                            })
                                        )
                                    ),

                                    // Alcool et Poids
                                    React.createElement('div', { className: "grid grid-cols-1 md:grid-cols-2 gap-4" },
                                        React.createElement('div', { className: "bg-red-50 p-4 rounded-lg" },
                                            React.createElement('label', { className: "block text-sm font-medium text-red-700 mb-2" },
                                                React.createElement('span', { dangerouslySetInnerHTML: { __html: lucide.icons['wine'].toSvg({ class: 'w-4 h-4 inline mr-2' }) } }),
                                                "Alcool (verres)"
                                            ),
                                            React.createElement('input', {
                                                type: "number",
                                                min: "0",
                                                step: "0.5",
                                                value: currentEntry.alcool,
                                                onChange: (e) => handleInputChange('alcool', e.target.value),
                                                className: "w-full px-3 py-2 border border-red-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                                            })
                                        ),
                                        React.createElement('div', { className: "bg-purple-50 p-4 rounded-lg" },
                                            React.createElement('label', { className: "block text-sm font-medium text-purple-700 mb-2" },
                                                React.createElement('span', { dangerouslySetInnerHTML: { __html: lucide.icons['weight'].toSvg({ class: 'w-4 h-4 inline mr-2' }) } }),
                                                "Poids (kg)"
                                            ),
                                            React.createElement('input', {
                                                type: "number",
                                                min: "0",
                                                step: "0.1",
                                                value: currentEntry.poids,
                                                onChange: (e) => handleInputChange('poids', e.target.value),
                                                className: "w-full px-3 py-2 border border-purple-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                                            })
                                        )
                                    ),

                                    React.createElement('button', {
                                        onClick: handleSubmit,
                                        disabled: isConnecting,
                                        className: `w-full py-3 px-6 rounded-lg font-medium transition-colors ${
                                            isConnecting 
                                                ? 'bg-gray-400 cursor-not-allowed' 
                                                : 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white hover:from-blue-700 hover:to-indigo-700'
                                        }`
                                    }, isConnecting ? 'Sauvegarde...' : 'Enregistrer les données')
                                )
                            ),

                            // Onglet Graphique Unifié
                            activeTab === 'graphique' && React.createElement('div', { className: "space-y-6" },
                                data.length === 0 ? React.createElement('div', { className: "text-center py-12" },
                                    React.createElement('p', { className: "opacity-90" }, 
                                        "Connectez votre application à Google Sheets pour sauvegarder automatiquement vos données."
                                    )
                                ),

                                React.createElement('div', { className: "space-y-6" },
                                    // ID du document Google Sheets
                                    React.createElement('div', { className: "bg-blue-50 p-4 rounded-lg" },
                                        React.createElement('label', { className: "block text-sm font-medium text-blue-700 mb-2" },
                                            "ID du document Google Sheets"
                                        ),
                                        React.createElement('input', {
                                            type: "text",
                                            value: sheetsConfig.spreadsheetId,
                                            onChange: (e) => setSheetsConfig({...sheetsConfig, spreadsheetId: e.target.value}),
                                            placeholder: "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms",
                                            className: "w-full px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        }),
                                        React.createElement('p', { className: "text-xs text-blue-600 mt-1" },
                                            "Trouvé dans l'URL de votre Google Sheet : docs.google.com/spreadsheets/d/[ID]/edit"
                                        )
                                    ),

                                    // Clé API
                                    React.createElement('div', { className: "bg-green-50 p-4 rounded-lg" },
                                        React.createElement('label', { className: "block text-sm font-medium text-green-700 mb-2" },
                                            "Clé API Google"
                                        ),
                                        React.createElement('input', {
                                            type: "password",
                                            value: sheetsConfig.apiKey,
                                            onChange: (e) => setSheetsConfig({...sheetsConfig, apiKey: e.target.value}),
                                            placeholder: "AIzaSyBnNAISIGI_pLbCZ3OM4z...",
                                            className: "w-full px-3 py-2 border border-green-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                                        }),
                                        React.createElement('p', { className: "text-xs text-green-600 mt-1" },
                                            "Créez une clé API dans Google Cloud Console avec l'API Sheets activée"
                                        )
                                    ),

                                    // Nom de la feuille
                                    React.createElement('div', { className: "bg-purple-50 p-4 rounded-lg" },
                                        React.createElement('label', { className: "block text-sm font-medium text-purple-700 mb-2" },
                                            "Nom de la feuille"
                                        ),
                                        React.createElement('input', {
                                            type: "text",
                                            value: sheetsConfig.sheetName,
                                            onChange: (e) => setSheetsConfig({...sheetsConfig, sheetName: e.target.value}),
                                            placeholder: "Suivi",
                                            className: "w-full px-3 py-2 border border-purple-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                                        })
                                    ),

                                    // Boutons d'action
                                    React.createElement('div', { className: "flex gap-4" },
                                        React.createElement('button', {
                                            onClick: testConnection,
                                            disabled: isConnecting || !sheetsConfig.spreadsheetId || !sheetsConfig.apiKey,
                                            className: "flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                                        }, isConnecting ? 'Test...' : 'Tester la connexion'),
                                        
                                        React.createElement('button', {
                                            onClick: () => saveConfig(sheetsConfig),
                                            disabled: !sheetsConfig.spreadsheetId || !sheetsConfig.apiKey,
                                            className: "flex-1 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                                        }, 'Sauvegarder la config')
                                    ),

                                    sheetsConfig.isConfigured && React.createElement('div', { className: "flex gap-4" },
                                        React.createElement('button', {
                                            onClick: loadFromSheets,
                                            disabled: isConnecting,
                                            className: "flex-1 bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 disabled:bg-gray-400"
                                        }, isConnecting ? 'Chargement...' : 'Charger depuis Sheets'),
                                        
                                        React.createElement('button', {
                                            onClick: () => saveToSheets(data),
                                            disabled: isConnecting,
                                            className: "flex-1 bg-orange-600 text-white py-2 px-4 rounded-lg hover:bg-orange-700 disabled:bg-gray-400"
                                        }, isConnecting ? 'Sauvegarde...' : 'Sauvegarder vers Sheets')
                                    )
                                ),

                                // Instructions détaillées
                                React.createElement('div', { className: "mt-8 bg-gray-50 p-6 rounded-lg" },
                                    React.createElement('h4', { className: "text-lg font-semibold text-gray-900 mb-4" },
                                        React.createElement('span', { dangerouslySetInnerHTML: { __html: lucide.icons['info'].toSvg({ class: 'w-5 h-5 inline mr-2' }) } }),
                                        "Guide de configuration"
                                    ),
                                    React.createElement('div', { className: "space-y-4 text-sm text-gray-700" },
                                        React.createElement('div', null,
                                            React.createElement('h5', { className: "font-semibold text-blue-600 mb-2" }, "1. Créer un Google Sheet"),
                                            React.createElement('ul', { className: "list-disc list-inside space-y-1 ml-4" },
                                                React.createElement('li', null, "Allez sur sheets.google.com"),
                                                React.createElement('li', null, "Créez un nouveau document"),
                                                React.createElement('li', null, "Nommez la première feuille 'Suivi' (ou autre nom)"),
                                                React.createElement('li', null, "Copiez l'ID depuis l'URL")
                                            )
                                        ),
                                        React.createElement('div', null,
                                            React.createElement('h5', { className: "font-semibold text-green-600 mb-2" }, "2. Obtenir une clé API"),
                                            React.createElement('ul', { className: "list-disc list-inside space-y-1 ml-4" },
                                                React.createElement('li', null, "Allez sur console.cloud.google.com"),
                                                React.createElement('li', null, "Créez un projet ou sélectionnez-en un"),
                                                React.createElement('li', null, "Activez l'API Google Sheets"),
                                                React.createElement('li', null, "Créez une clé API"),
                                                React.createElement('li', null, "Copiez la clé générée")
                                            )
                                        ),
                                        React.createElement('div', null,
                                            React.createElement('h5', { className: "font-semibold text-purple-600 mb-2" }, "3. Permissions"),
                                            React.createElement('ul', { className: "list-disc list-inside space-y-1 ml-4" },
                                                React.createElement('li', null, "Rendez votre Google Sheet public en lecture/écriture"),
                                                React.createElement('li', null, "Ou partagez-le avec 'Tous les utilisateurs avec le lien'"),
                                                React.createElement('li', null, "Donnez les droits d'édition")
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            );
        };

        ReactDOM.render(React.createElement(DailyTracker), document.getElementById('root'));
    </script>
</body>
</html>text-gray-500 text-lg" }, 
                                        "Aucune donnée à afficher. Commencez par saisir vos premières données !"
                                    )
                                ) : [
                                    React.createElement('div', { key: 'unified-chart', className: "bg-white border border-gray-200 rounded-lg p-6" },
                                        React.createElement('h3', { className: "text-xl font-semibold text-gray-900 mb-4" }, 
                                            "Vue d'ensemble - Toutes les métriques"
                                        ),
                                        React.createElement('div', { className: "mb-4 text-sm text-gray-600" },
                                            React.createElement('p', null, "📊 Les barres représentent le sport total (échelle de gauche)"),
                                            React.createElement('p', null, "⚖️ La ligne rose représente le poids (valeurs réelles dans les tooltips)"),
                                            React.createElement('p', null, "🍷 La ligne rouge représente l'alcool (valeurs réelles dans les tooltips)")
                                        ),
                                        React.createElement(ResponsiveContainer, { width: "100%", height: 400 },
                                            React.createElement(ComposedChart, { data: chartData },
                                                React.createElement(CartesianGrid, { strokeDasharray: "3 3" }),
                                                React.createElement(XAxis, { dataKey: "date" }),
                                                React.createElement(YAxis, { 
                                                    yAxisId: "left", 
                                                    orientation: "left",
                                                    label: { value: 'Sport (minutes)', angle: -90, position: 'insideLeft' }
                                                }),
                                                React.createElement(YAxis, { 
                                                    yAxisId: "right", 
                                                    orientation: "right",
                                                    hide: true
                                                }),
                                                React.createElement(Tooltip, { content: React.createElement(CustomTooltip) }),
                                                React.createElement(Legend),
                                                
                                                // Barres pour le sport total
                                                React.createElement(Bar, { 
                                                    yAxisId: "left",
                                                    dataKey: "sportTotal", 
                                                    fill: "#8B5CF6", 
                                                    name: "Sport Total",
                                                    opacity: 0.8
                                                }),
                                                
                                                // Lignes pour les sports individuels
                                                React.createElement(Line, { 
                                                    yAxisId: "left",
                                                    type: "monotone", 
                                                    dataKey: "sportTapis", 
                                                    stroke: "#10B981", 
                                                    strokeWidth: 2, 
                                                    name: "Tapis",
                                                    dot: { r: 4 }
                                                }),
                                                React.createElement(Line, { 
                                                    yAxisId: "left",
                                                    type: "monotone", 
                                                    dataKey: "sportVelo", 
                                                    stroke: "#3B82F6", 
                                                    strokeWidth: 2, 
                                                    name: "Vélo",
                                                    dot: { r: 4 }
                                                }),
                                                React.createElement(Line, { 
                                                    yAxisId: "left",
                                                    type: "monotone", 
                                                    dataKey: "sportCourse", 
                                                    stroke: "#F59E0B", 
                                                    strokeWidth: 2, 
                                                    name: "Course",
                                                    dot: { r: 4 }
                                                }),
                                                
                                                // Lignes pour poids et alcool (normalisées)
                                                React.createElement(Line, { 
                                                    yAxisId: "left",
                                                    type: "monotone", 
                                                    dataKey: "poidsNormalized", 
                                                    stroke: "#EC4899", 
                                                    strokeWidth: 3, 
                                                    name: "Poids (normalisé)",
                                                    dot: { r: 5 },
                                                    strokeDasharray: "5 5"
                                                }),
                                                React.createElement(Line, { 
                                                    yAxisId: "left",
                                                    type: "monotone", 
                                                    dataKey: "alcoolNormalized", 
                                                    stroke: "#EF4444", 
                                                    strokeWidth: 3, 
                                                    name: "Alcool (normalisé)",
                                                    dot: { r: 5 },
                                                    strokeDasharray: "10 5"
                                                })
                                            )
                                        )
                                    )
                                ]
                            ),

                            // Onglet Configuration Google Sheets
                            activeTab === 'config' && React.createElement('div', { className: "max-w-2xl mx-auto" },
                                React.createElement('div', { className: "config-panel text-white p-6 rounded-lg mb-6" },
                                    React.createElement('h3', { className: "text-xl font-semibold mb-4" },
                                        React.createElement('span', { dangerouslySetInnerHTML: { __html: lucide.icons['settings'].toSvg({ class: 'w-6 h-6 inline mr-2' }) } }),
                                        "Configuration Google Sheets"
                                    ),
                                    React.createElement('p', { className: "
